Image processing steps:

Step1: Prepare Training Data
Step2: Configure value K
       k-NN(k=K)
Step3: Training K-NN model
       k-NN.fit(Features, Labels)
Step4: Testing k-NN model
       k-NN.predict(Features)
Step5: Evaluate K-NN model
      k-NN.evaluate(Features, Labels) # for classification: accuracy, precision, f1-score




















=========================================Basic============================

Note 1: ML algorithms recognize images through numbers, but question is how to
store these images (actually numeric values) into python for algorithms to process.

Note 2: How to conververt dataset from Rank-3 tensor with shape for example:
(60000, 28, 28) into Rank-2 tensor with Shape = (60000, 784)

Note 3: Model complexity are overfitting, underfitting, optimal fitting.

Note 4: In binary classification, we generally note the interested class as
positive class (Y = 1) and Negative class (Y=0)

Note 5: Accuracy metric is not always a useful metric for imbalanced classification scenario.
       and Imbalanced data set is when number of Class A is much larger than number of class B or others.


Note 5: How to calculate various Matrixs

from sklearn.metrics import confusion
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score

confusion_matirx(labels, y_pred)
accuracy_score(labels, y_pred)
precision_score(labels, y_pred, pos_label=1)
recall_score(labels, y_pred, pos_label=1)
f1_sore(labels, y_pred, pos_label=1)


Note 6: In sklearn, actual label is always put first, followed by Predicted label
